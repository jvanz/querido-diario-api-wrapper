# coding: utf-8

"""
    Querido DiÃ¡rio

    API to access the gazettes from all Brazilian cities  # noqa: E501

    The version of the OpenAPI document: 0.17.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from querido_diario import schemas  # noqa: F401


class Entity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "entity_type_description",
            "entity_type",
            "entities",
        }
        
        class properties:
            entity_type = schemas.StrSchema
            entity_type_description = schemas.StrSchema
            
            
            class entities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entities':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "entity_type": entity_type,
                "entity_type_description": entity_type_description,
                "entities": entities,
            }
    
    entity_type_description: MetaOapg.properties.entity_type_description
    entity_type: MetaOapg.properties.entity_type
    entities: MetaOapg.properties.entities
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type_description"]) -> MetaOapg.properties.entity_type_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity_type", "entity_type_description", "entities", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type_description"]) -> MetaOapg.properties.entity_type_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity_type", "entity_type_description", "entities", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        entity_type_description: typing.Union[MetaOapg.properties.entity_type_description, str, ],
        entity_type: typing.Union[MetaOapg.properties.entity_type, str, ],
        entities: typing.Union[MetaOapg.properties.entities, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Entity':
        return super().__new__(
            cls,
            *_args,
            entity_type_description=entity_type_description,
            entity_type=entity_type,
            entities=entities,
            _configuration=_configuration,
            **kwargs,
        )
