# coding: utf-8

"""
    Querido DiÃ¡rio

    API to access the gazettes from all Brazilian cities  # noqa: E501

    The version of the OpenAPI document: 0.17.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from querido_diario import schemas  # noqa: F401


class City(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "level",
            "territory_name",
            "state_code",
            "territory_id",
        }
        
        class properties:
            territory_id = schemas.StrSchema
            territory_name = schemas.StrSchema
            state_code = schemas.StrSchema
        
            @staticmethod
            def level() -> typing.Type['CityLevel']:
                return CityLevel
            
            
            class publication_urls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'publication_urls':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "territory_id": territory_id,
                "territory_name": territory_name,
                "state_code": state_code,
                "level": level,
                "publication_urls": publication_urls,
            }
    
    level: 'CityLevel'
    territory_name: MetaOapg.properties.territory_name
    state_code: MetaOapg.properties.state_code
    territory_id: MetaOapg.properties.territory_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["territory_id"]) -> MetaOapg.properties.territory_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["territory_name"]) -> MetaOapg.properties.territory_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_code"]) -> MetaOapg.properties.state_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> 'CityLevel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publication_urls"]) -> MetaOapg.properties.publication_urls: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["territory_id", "territory_name", "state_code", "level", "publication_urls", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["territory_id"]) -> MetaOapg.properties.territory_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["territory_name"]) -> MetaOapg.properties.territory_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_code"]) -> MetaOapg.properties.state_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> 'CityLevel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publication_urls"]) -> typing.Union[MetaOapg.properties.publication_urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["territory_id", "territory_name", "state_code", "level", "publication_urls", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        level: 'CityLevel',
        territory_name: typing.Union[MetaOapg.properties.territory_name, str, ],
        state_code: typing.Union[MetaOapg.properties.state_code, str, ],
        territory_id: typing.Union[MetaOapg.properties.territory_id, str, ],
        publication_urls: typing.Union[MetaOapg.properties.publication_urls, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'City':
        return super().__new__(
            cls,
            *_args,
            level=level,
            territory_name=territory_name,
            state_code=state_code,
            territory_id=territory_id,
            publication_urls=publication_urls,
            _configuration=_configuration,
            **kwargs,
        )

from querido_diario.model.city_level import CityLevel
