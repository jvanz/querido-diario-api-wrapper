# coding: utf-8

"""
    Querido DiÃ¡rio

    API to access the gazettes from all Brazilian cities  # noqa: E501

    The version of the OpenAPI document: 0.17.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from querido_diario import schemas  # noqa: F401


class ThemedExcerptSearchResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "total_excerpts",
            "excerpts",
        }
        
        class properties:
            total_excerpts = schemas.IntSchema
            
            
            class excerpts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ThemedExcerptItem']:
                        return ThemedExcerptItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ThemedExcerptItem'], typing.List['ThemedExcerptItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'excerpts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ThemedExcerptItem':
                    return super().__getitem__(i)
            __annotations__ = {
                "total_excerpts": total_excerpts,
                "excerpts": excerpts,
            }
    
    total_excerpts: MetaOapg.properties.total_excerpts
    excerpts: MetaOapg.properties.excerpts
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_excerpts"]) -> MetaOapg.properties.total_excerpts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excerpts"]) -> MetaOapg.properties.excerpts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_excerpts", "excerpts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_excerpts"]) -> MetaOapg.properties.total_excerpts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excerpts"]) -> MetaOapg.properties.excerpts: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_excerpts", "excerpts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total_excerpts: typing.Union[MetaOapg.properties.total_excerpts, decimal.Decimal, int, ],
        excerpts: typing.Union[MetaOapg.properties.excerpts, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThemedExcerptSearchResponse':
        return super().__new__(
            cls,
            *_args,
            total_excerpts=total_excerpts,
            excerpts=excerpts,
            _configuration=_configuration,
            **kwargs,
        )

from querido_diario.model.themed_excerpt_item import ThemedExcerptItem
