# coding: utf-8

"""
    Querido DiÃ¡rio

    API to access the gazettes from all Brazilian cities  # noqa: E501

    The version of the OpenAPI document: 0.17.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from querido_diario import schemas  # noqa: F401


class Company(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "cnpj_dv",
            "cnpj_completo_apenas_numeros",
            "cnpj_ordem",
            "cnpj_basico",
            "cnpj_completo",
        }
        
        class properties:
            cnpj_basico = schemas.StrSchema
            cnpj_ordem = schemas.StrSchema
            cnpj_dv = schemas.StrSchema
            cnpj_completo = schemas.StrSchema
            cnpj_completo_apenas_numeros = schemas.StrSchema
            identificador_matriz_filial = schemas.StrSchema
            nome_fantasia = schemas.StrSchema
            situacao_cadastral = schemas.StrSchema
            data_situacao_cadastral = schemas.StrSchema
            motivo_situacao_cadastral = schemas.StrSchema
            nome_cidade_exterior = schemas.StrSchema
            data_inicio_atividade = schemas.StrSchema
            cnae_fiscal_secundario = schemas.StrSchema
            tipo_logradouro = schemas.StrSchema
            logradouro = schemas.StrSchema
            numero = schemas.StrSchema
            complemento = schemas.StrSchema
            bairro = schemas.StrSchema
            cep = schemas.StrSchema
            uf = schemas.StrSchema
            ddd_telefone_1 = schemas.StrSchema
            ddd_telefone_2 = schemas.StrSchema
            ddd_telefone_fax = schemas.StrSchema
            correio_eletronico = schemas.StrSchema
            situacao_especial = schemas.StrSchema
            data_situacao_especial = schemas.StrSchema
            pais = schemas.StrSchema
            municipio = schemas.StrSchema
            razao_social = schemas.StrSchema
            natureza_juridica = schemas.StrSchema
            qualificacao_do_responsavel = schemas.StrSchema
            capital_social = schemas.StrSchema
            porte = schemas.StrSchema
            ente_federativo_responsavel = schemas.StrSchema
            opcao_pelo_simples = schemas.StrSchema
            data_opcao_pelo_simples = schemas.StrSchema
            data_exclusao_pelo_simples = schemas.StrSchema
            opcao_pelo_mei = schemas.StrSchema
            data_opcao_pelo_mei = schemas.StrSchema
            data_exclusao_pelo_mei = schemas.StrSchema
            cnae = schemas.StrSchema
            __annotations__ = {
                "cnpj_basico": cnpj_basico,
                "cnpj_ordem": cnpj_ordem,
                "cnpj_dv": cnpj_dv,
                "cnpj_completo": cnpj_completo,
                "cnpj_completo_apenas_numeros": cnpj_completo_apenas_numeros,
                "identificador_matriz_filial": identificador_matriz_filial,
                "nome_fantasia": nome_fantasia,
                "situacao_cadastral": situacao_cadastral,
                "data_situacao_cadastral": data_situacao_cadastral,
                "motivo_situacao_cadastral": motivo_situacao_cadastral,
                "nome_cidade_exterior": nome_cidade_exterior,
                "data_inicio_atividade": data_inicio_atividade,
                "cnae_fiscal_secundario": cnae_fiscal_secundario,
                "tipo_logradouro": tipo_logradouro,
                "logradouro": logradouro,
                "numero": numero,
                "complemento": complemento,
                "bairro": bairro,
                "cep": cep,
                "uf": uf,
                "ddd_telefone_1": ddd_telefone_1,
                "ddd_telefone_2": ddd_telefone_2,
                "ddd_telefone_fax": ddd_telefone_fax,
                "correio_eletronico": correio_eletronico,
                "situacao_especial": situacao_especial,
                "data_situacao_especial": data_situacao_especial,
                "pais": pais,
                "municipio": municipio,
                "razao_social": razao_social,
                "natureza_juridica": natureza_juridica,
                "qualificacao_do_responsavel": qualificacao_do_responsavel,
                "capital_social": capital_social,
                "porte": porte,
                "ente_federativo_responsavel": ente_federativo_responsavel,
                "opcao_pelo_simples": opcao_pelo_simples,
                "data_opcao_pelo_simples": data_opcao_pelo_simples,
                "data_exclusao_pelo_simples": data_exclusao_pelo_simples,
                "opcao_pelo_mei": opcao_pelo_mei,
                "data_opcao_pelo_mei": data_opcao_pelo_mei,
                "data_exclusao_pelo_mei": data_exclusao_pelo_mei,
                "cnae": cnae,
            }
    
    cnpj_dv: MetaOapg.properties.cnpj_dv
    cnpj_completo_apenas_numeros: MetaOapg.properties.cnpj_completo_apenas_numeros
    cnpj_ordem: MetaOapg.properties.cnpj_ordem
    cnpj_basico: MetaOapg.properties.cnpj_basico
    cnpj_completo: MetaOapg.properties.cnpj_completo
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnpj_basico"]) -> MetaOapg.properties.cnpj_basico: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnpj_ordem"]) -> MetaOapg.properties.cnpj_ordem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnpj_dv"]) -> MetaOapg.properties.cnpj_dv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnpj_completo"]) -> MetaOapg.properties.cnpj_completo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnpj_completo_apenas_numeros"]) -> MetaOapg.properties.cnpj_completo_apenas_numeros: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identificador_matriz_filial"]) -> MetaOapg.properties.identificador_matriz_filial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nome_fantasia"]) -> MetaOapg.properties.nome_fantasia: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["situacao_cadastral"]) -> MetaOapg.properties.situacao_cadastral: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_situacao_cadastral"]) -> MetaOapg.properties.data_situacao_cadastral: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motivo_situacao_cadastral"]) -> MetaOapg.properties.motivo_situacao_cadastral: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nome_cidade_exterior"]) -> MetaOapg.properties.nome_cidade_exterior: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_inicio_atividade"]) -> MetaOapg.properties.data_inicio_atividade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnae_fiscal_secundario"]) -> MetaOapg.properties.cnae_fiscal_secundario: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tipo_logradouro"]) -> MetaOapg.properties.tipo_logradouro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logradouro"]) -> MetaOapg.properties.logradouro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numero"]) -> MetaOapg.properties.numero: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complemento"]) -> MetaOapg.properties.complemento: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bairro"]) -> MetaOapg.properties.bairro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cep"]) -> MetaOapg.properties.cep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uf"]) -> MetaOapg.properties.uf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ddd_telefone_1"]) -> MetaOapg.properties.ddd_telefone_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ddd_telefone_2"]) -> MetaOapg.properties.ddd_telefone_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ddd_telefone_fax"]) -> MetaOapg.properties.ddd_telefone_fax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correio_eletronico"]) -> MetaOapg.properties.correio_eletronico: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["situacao_especial"]) -> MetaOapg.properties.situacao_especial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_situacao_especial"]) -> MetaOapg.properties.data_situacao_especial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pais"]) -> MetaOapg.properties.pais: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["municipio"]) -> MetaOapg.properties.municipio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["razao_social"]) -> MetaOapg.properties.razao_social: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["natureza_juridica"]) -> MetaOapg.properties.natureza_juridica: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificacao_do_responsavel"]) -> MetaOapg.properties.qualificacao_do_responsavel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capital_social"]) -> MetaOapg.properties.capital_social: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["porte"]) -> MetaOapg.properties.porte: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ente_federativo_responsavel"]) -> MetaOapg.properties.ente_federativo_responsavel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opcao_pelo_simples"]) -> MetaOapg.properties.opcao_pelo_simples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_opcao_pelo_simples"]) -> MetaOapg.properties.data_opcao_pelo_simples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_exclusao_pelo_simples"]) -> MetaOapg.properties.data_exclusao_pelo_simples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["opcao_pelo_mei"]) -> MetaOapg.properties.opcao_pelo_mei: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_opcao_pelo_mei"]) -> MetaOapg.properties.data_opcao_pelo_mei: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_exclusao_pelo_mei"]) -> MetaOapg.properties.data_exclusao_pelo_mei: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnae"]) -> MetaOapg.properties.cnae: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cnpj_basico", "cnpj_ordem", "cnpj_dv", "cnpj_completo", "cnpj_completo_apenas_numeros", "identificador_matriz_filial", "nome_fantasia", "situacao_cadastral", "data_situacao_cadastral", "motivo_situacao_cadastral", "nome_cidade_exterior", "data_inicio_atividade", "cnae_fiscal_secundario", "tipo_logradouro", "logradouro", "numero", "complemento", "bairro", "cep", "uf", "ddd_telefone_1", "ddd_telefone_2", "ddd_telefone_fax", "correio_eletronico", "situacao_especial", "data_situacao_especial", "pais", "municipio", "razao_social", "natureza_juridica", "qualificacao_do_responsavel", "capital_social", "porte", "ente_federativo_responsavel", "opcao_pelo_simples", "data_opcao_pelo_simples", "data_exclusao_pelo_simples", "opcao_pelo_mei", "data_opcao_pelo_mei", "data_exclusao_pelo_mei", "cnae", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnpj_basico"]) -> MetaOapg.properties.cnpj_basico: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnpj_ordem"]) -> MetaOapg.properties.cnpj_ordem: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnpj_dv"]) -> MetaOapg.properties.cnpj_dv: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnpj_completo"]) -> MetaOapg.properties.cnpj_completo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnpj_completo_apenas_numeros"]) -> MetaOapg.properties.cnpj_completo_apenas_numeros: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identificador_matriz_filial"]) -> typing.Union[MetaOapg.properties.identificador_matriz_filial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nome_fantasia"]) -> typing.Union[MetaOapg.properties.nome_fantasia, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["situacao_cadastral"]) -> typing.Union[MetaOapg.properties.situacao_cadastral, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_situacao_cadastral"]) -> typing.Union[MetaOapg.properties.data_situacao_cadastral, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motivo_situacao_cadastral"]) -> typing.Union[MetaOapg.properties.motivo_situacao_cadastral, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nome_cidade_exterior"]) -> typing.Union[MetaOapg.properties.nome_cidade_exterior, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_inicio_atividade"]) -> typing.Union[MetaOapg.properties.data_inicio_atividade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnae_fiscal_secundario"]) -> typing.Union[MetaOapg.properties.cnae_fiscal_secundario, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tipo_logradouro"]) -> typing.Union[MetaOapg.properties.tipo_logradouro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logradouro"]) -> typing.Union[MetaOapg.properties.logradouro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numero"]) -> typing.Union[MetaOapg.properties.numero, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complemento"]) -> typing.Union[MetaOapg.properties.complemento, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bairro"]) -> typing.Union[MetaOapg.properties.bairro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cep"]) -> typing.Union[MetaOapg.properties.cep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uf"]) -> typing.Union[MetaOapg.properties.uf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ddd_telefone_1"]) -> typing.Union[MetaOapg.properties.ddd_telefone_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ddd_telefone_2"]) -> typing.Union[MetaOapg.properties.ddd_telefone_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ddd_telefone_fax"]) -> typing.Union[MetaOapg.properties.ddd_telefone_fax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correio_eletronico"]) -> typing.Union[MetaOapg.properties.correio_eletronico, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["situacao_especial"]) -> typing.Union[MetaOapg.properties.situacao_especial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_situacao_especial"]) -> typing.Union[MetaOapg.properties.data_situacao_especial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pais"]) -> typing.Union[MetaOapg.properties.pais, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["municipio"]) -> typing.Union[MetaOapg.properties.municipio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["razao_social"]) -> typing.Union[MetaOapg.properties.razao_social, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["natureza_juridica"]) -> typing.Union[MetaOapg.properties.natureza_juridica, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificacao_do_responsavel"]) -> typing.Union[MetaOapg.properties.qualificacao_do_responsavel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capital_social"]) -> typing.Union[MetaOapg.properties.capital_social, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["porte"]) -> typing.Union[MetaOapg.properties.porte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ente_federativo_responsavel"]) -> typing.Union[MetaOapg.properties.ente_federativo_responsavel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opcao_pelo_simples"]) -> typing.Union[MetaOapg.properties.opcao_pelo_simples, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_opcao_pelo_simples"]) -> typing.Union[MetaOapg.properties.data_opcao_pelo_simples, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_exclusao_pelo_simples"]) -> typing.Union[MetaOapg.properties.data_exclusao_pelo_simples, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["opcao_pelo_mei"]) -> typing.Union[MetaOapg.properties.opcao_pelo_mei, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_opcao_pelo_mei"]) -> typing.Union[MetaOapg.properties.data_opcao_pelo_mei, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_exclusao_pelo_mei"]) -> typing.Union[MetaOapg.properties.data_exclusao_pelo_mei, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnae"]) -> typing.Union[MetaOapg.properties.cnae, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cnpj_basico", "cnpj_ordem", "cnpj_dv", "cnpj_completo", "cnpj_completo_apenas_numeros", "identificador_matriz_filial", "nome_fantasia", "situacao_cadastral", "data_situacao_cadastral", "motivo_situacao_cadastral", "nome_cidade_exterior", "data_inicio_atividade", "cnae_fiscal_secundario", "tipo_logradouro", "logradouro", "numero", "complemento", "bairro", "cep", "uf", "ddd_telefone_1", "ddd_telefone_2", "ddd_telefone_fax", "correio_eletronico", "situacao_especial", "data_situacao_especial", "pais", "municipio", "razao_social", "natureza_juridica", "qualificacao_do_responsavel", "capital_social", "porte", "ente_federativo_responsavel", "opcao_pelo_simples", "data_opcao_pelo_simples", "data_exclusao_pelo_simples", "opcao_pelo_mei", "data_opcao_pelo_mei", "data_exclusao_pelo_mei", "cnae", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cnpj_dv: typing.Union[MetaOapg.properties.cnpj_dv, str, ],
        cnpj_completo_apenas_numeros: typing.Union[MetaOapg.properties.cnpj_completo_apenas_numeros, str, ],
        cnpj_ordem: typing.Union[MetaOapg.properties.cnpj_ordem, str, ],
        cnpj_basico: typing.Union[MetaOapg.properties.cnpj_basico, str, ],
        cnpj_completo: typing.Union[MetaOapg.properties.cnpj_completo, str, ],
        identificador_matriz_filial: typing.Union[MetaOapg.properties.identificador_matriz_filial, str, schemas.Unset] = schemas.unset,
        nome_fantasia: typing.Union[MetaOapg.properties.nome_fantasia, str, schemas.Unset] = schemas.unset,
        situacao_cadastral: typing.Union[MetaOapg.properties.situacao_cadastral, str, schemas.Unset] = schemas.unset,
        data_situacao_cadastral: typing.Union[MetaOapg.properties.data_situacao_cadastral, str, schemas.Unset] = schemas.unset,
        motivo_situacao_cadastral: typing.Union[MetaOapg.properties.motivo_situacao_cadastral, str, schemas.Unset] = schemas.unset,
        nome_cidade_exterior: typing.Union[MetaOapg.properties.nome_cidade_exterior, str, schemas.Unset] = schemas.unset,
        data_inicio_atividade: typing.Union[MetaOapg.properties.data_inicio_atividade, str, schemas.Unset] = schemas.unset,
        cnae_fiscal_secundario: typing.Union[MetaOapg.properties.cnae_fiscal_secundario, str, schemas.Unset] = schemas.unset,
        tipo_logradouro: typing.Union[MetaOapg.properties.tipo_logradouro, str, schemas.Unset] = schemas.unset,
        logradouro: typing.Union[MetaOapg.properties.logradouro, str, schemas.Unset] = schemas.unset,
        numero: typing.Union[MetaOapg.properties.numero, str, schemas.Unset] = schemas.unset,
        complemento: typing.Union[MetaOapg.properties.complemento, str, schemas.Unset] = schemas.unset,
        bairro: typing.Union[MetaOapg.properties.bairro, str, schemas.Unset] = schemas.unset,
        cep: typing.Union[MetaOapg.properties.cep, str, schemas.Unset] = schemas.unset,
        uf: typing.Union[MetaOapg.properties.uf, str, schemas.Unset] = schemas.unset,
        ddd_telefone_1: typing.Union[MetaOapg.properties.ddd_telefone_1, str, schemas.Unset] = schemas.unset,
        ddd_telefone_2: typing.Union[MetaOapg.properties.ddd_telefone_2, str, schemas.Unset] = schemas.unset,
        ddd_telefone_fax: typing.Union[MetaOapg.properties.ddd_telefone_fax, str, schemas.Unset] = schemas.unset,
        correio_eletronico: typing.Union[MetaOapg.properties.correio_eletronico, str, schemas.Unset] = schemas.unset,
        situacao_especial: typing.Union[MetaOapg.properties.situacao_especial, str, schemas.Unset] = schemas.unset,
        data_situacao_especial: typing.Union[MetaOapg.properties.data_situacao_especial, str, schemas.Unset] = schemas.unset,
        pais: typing.Union[MetaOapg.properties.pais, str, schemas.Unset] = schemas.unset,
        municipio: typing.Union[MetaOapg.properties.municipio, str, schemas.Unset] = schemas.unset,
        razao_social: typing.Union[MetaOapg.properties.razao_social, str, schemas.Unset] = schemas.unset,
        natureza_juridica: typing.Union[MetaOapg.properties.natureza_juridica, str, schemas.Unset] = schemas.unset,
        qualificacao_do_responsavel: typing.Union[MetaOapg.properties.qualificacao_do_responsavel, str, schemas.Unset] = schemas.unset,
        capital_social: typing.Union[MetaOapg.properties.capital_social, str, schemas.Unset] = schemas.unset,
        porte: typing.Union[MetaOapg.properties.porte, str, schemas.Unset] = schemas.unset,
        ente_federativo_responsavel: typing.Union[MetaOapg.properties.ente_federativo_responsavel, str, schemas.Unset] = schemas.unset,
        opcao_pelo_simples: typing.Union[MetaOapg.properties.opcao_pelo_simples, str, schemas.Unset] = schemas.unset,
        data_opcao_pelo_simples: typing.Union[MetaOapg.properties.data_opcao_pelo_simples, str, schemas.Unset] = schemas.unset,
        data_exclusao_pelo_simples: typing.Union[MetaOapg.properties.data_exclusao_pelo_simples, str, schemas.Unset] = schemas.unset,
        opcao_pelo_mei: typing.Union[MetaOapg.properties.opcao_pelo_mei, str, schemas.Unset] = schemas.unset,
        data_opcao_pelo_mei: typing.Union[MetaOapg.properties.data_opcao_pelo_mei, str, schemas.Unset] = schemas.unset,
        data_exclusao_pelo_mei: typing.Union[MetaOapg.properties.data_exclusao_pelo_mei, str, schemas.Unset] = schemas.unset,
        cnae: typing.Union[MetaOapg.properties.cnae, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Company':
        return super().__new__(
            cls,
            *_args,
            cnpj_dv=cnpj_dv,
            cnpj_completo_apenas_numeros=cnpj_completo_apenas_numeros,
            cnpj_ordem=cnpj_ordem,
            cnpj_basico=cnpj_basico,
            cnpj_completo=cnpj_completo,
            identificador_matriz_filial=identificador_matriz_filial,
            nome_fantasia=nome_fantasia,
            situacao_cadastral=situacao_cadastral,
            data_situacao_cadastral=data_situacao_cadastral,
            motivo_situacao_cadastral=motivo_situacao_cadastral,
            nome_cidade_exterior=nome_cidade_exterior,
            data_inicio_atividade=data_inicio_atividade,
            cnae_fiscal_secundario=cnae_fiscal_secundario,
            tipo_logradouro=tipo_logradouro,
            logradouro=logradouro,
            numero=numero,
            complemento=complemento,
            bairro=bairro,
            cep=cep,
            uf=uf,
            ddd_telefone_1=ddd_telefone_1,
            ddd_telefone_2=ddd_telefone_2,
            ddd_telefone_fax=ddd_telefone_fax,
            correio_eletronico=correio_eletronico,
            situacao_especial=situacao_especial,
            data_situacao_especial=data_situacao_especial,
            pais=pais,
            municipio=municipio,
            razao_social=razao_social,
            natureza_juridica=natureza_juridica,
            qualificacao_do_responsavel=qualificacao_do_responsavel,
            capital_social=capital_social,
            porte=porte,
            ente_federativo_responsavel=ente_federativo_responsavel,
            opcao_pelo_simples=opcao_pelo_simples,
            data_opcao_pelo_simples=data_opcao_pelo_simples,
            data_exclusao_pelo_simples=data_exclusao_pelo_simples,
            opcao_pelo_mei=opcao_pelo_mei,
            data_opcao_pelo_mei=data_opcao_pelo_mei,
            data_exclusao_pelo_mei=data_exclusao_pelo_mei,
            cnae=cnae,
            _configuration=_configuration,
            **kwargs,
        )
